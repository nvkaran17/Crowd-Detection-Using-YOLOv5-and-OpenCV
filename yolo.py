# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h8tRy0TAKlqgR-cW5o_voIgmPSrFNU2r
"""

import streamlit as st
import torch
import torchvision
import torchvision.transforms as T
import numpy as np
import cv2

# Load YOLOv5
yolo_model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
yolo_model.eval()

# Load Faster R-CNN
rcnn_model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
rcnn_model.eval()

# Transform for Faster R-CNN
transform = T.Compose([
    T.ToTensor()
])

st.title("🚨 Live Crowd Detection using YOLOv5 + Faster R-CNN (Webcam)")

area = st.number_input('Enter Area Size (square meters):', min_value=10.0, step=10.0)

start = st.button("Start Webcam Detection")

if start and area > 0:
    cap = cv2.VideoCapture(0)
    FRAME_WINDOW = st.image([])

    safe_density = 0.5  # people per square meter
    threshold = area * safe_density

    st.write(f"📏 Safe limit: {threshold:.2f} people for {area} sqm.")

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            st.error("Failed to capture image from camera.")
            break

        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img_tensor = transform(frame_rgb).unsqueeze(0)

        ## --- YOLOv5 Detection ---
        yolo_results = yolo_model(frame_rgb)

        yolo_persons = []
        for *box, conf, cls in yolo_results.xyxy[0]:
            if int(cls) == 0 and conf > 0.7:  # 0 = 'person' in YOLO
                yolo_persons.append(box)

        ## --- Faster R-CNN Detection ---
        with torch.no_grad():
            rcnn_outputs = rcnn_model(img_tensor)

        rcnn_persons = []
        for box, label, score in zip(rcnn_outputs[0]['boxes'], rcnn_outputs[0]['labels'], rcnn_outputs[0]['scores']):
            if label.item() == 1 and score.item() > 0.7:  # 1 = 'person'
                rcnn_persons.append(box)

        ## --- Merge Results ---
        total_persons = len(yolo_persons) + len(rcnn_persons)

        # Draw YOLO detections
        for box in yolo_persons:
            x1, y1, x2, y2 = map(int, box)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, 'YOLO Person', (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Draw RCNN detections
        # Draw RCNN detections
        for box in rcnn_persons:
            box = box.cpu().numpy().astype(int)  # Convert tensor to numpy int array
            x1, y1, x2, y2 = box
            cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
            cv2.putText(frame, 'RCNN Person', (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

        ## --- Calculate density ---
        density = total_persons / area

        # Show counts and alerts
        cv2.putText(frame, f"Persons: {total_persons}", (20, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

        cv2.putText(frame, f"Density: {density:.2f} per sqm", (20, 70),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

        if total_persons > threshold:
            cv2.putText(frame, "🚨 ALERT: High Crowd Density!", (20, 110),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)

        FRAME_WINDOW.image(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

    cap.release()
